{"version":3,"sources":["../src/index.ts","../src/commands/init.ts","../src/utils/get-package-info.ts","../src/utils/logger.ts","../src/utils/handle-error.ts","../src/utils/set-up-config.ts","../src/utils/emoji-list.ts","../src/utils/templates.ts","../src/utils/types.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Command } from 'commander';\n\nimport { init } from '@/src/commands/init';\nimport { getPackageInfo } from '@/src/utils/get-package-info';\n\nprocess.on('SIGINT', () => process.exit(0));\nprocess.on('SIGTERM', () => process.exit(0));\n\nasync function main() {\n  const packageJson = getPackageInfo();\n\n  const program = new Command()\n    .name('beautiful-commits')\n    .description('‚òÑÔ∏è Customize and make beautiful your commits ‚òÑÔ∏è')\n    .helpOption('-h, --help', 'üí° display help for commands üí°')\n    .version(\n      `üì¶ ${packageJson.version}` || 'üì¶ 1.0.0',\n      '-v, --version',\n      'üì¶ display the version number üì¶'\n    );\n  program.addCommand(init);\n\n  program.parse();\n}\n\nmain();\n","import { Command } from 'commander';\nimport * as process from 'node:process';\n\nimport { cwdExists, detectPackageManager, handleError, installHuskyPackage, logger, setUpConfig } from '@/src/utils';\nimport { initOptionsSchema } from '@/src/utils/types';\n\nexport const init = new Command()\n  .name('init')\n  .description('üöÄ initialize .husky in project and install dependency üöÄ')\n  .option('-c, --cwd <cwd>', 'üìÇ The working directory. Defaults to the current directory. üìÇ', process.cwd())\n  .action(async (opts) => {\n    try {\n      const options = initOptionsSchema.parse({\n        cwd: opts.cwd\n      });\n\n      const cwd = cwdExists(options.cwd || process.cwd());\n\n      const packageManager = detectPackageManager();\n\n      if (!packageManager) {\n        logger.error('üí• Unable to detect package manager. üí•');\n        process.exit(1);\n      }\n\n      await installHuskyPackage(packageManager);\n\n      await setUpConfig(cwd, packageManager);\n    } catch (error) {\n      handleError(error);\n    }\n  });\n","import fs from 'fs-extra';\nimport path from 'node:path';\nimport type { PackageJson } from 'type-fest';\n\nimport { logger } from '@/src/utils/logger';\nimport type { PackageManager } from '@/src/utils/types';\n\nexport function getPackageInfo() {\n  const packageJsonPath = path.join('package.json');\n\n  return fs.readJSONSync(packageJsonPath) as PackageJson;\n}\n\nexport function detectPackageManager(): PackageManager | null {\n  const cwd = process.cwd();\n\n  if (fs.existsSync(path.join(cwd, 'bun.lockb'))) {\n    return 'bun';\n  } else if (fs.existsSync(path.join(cwd, 'pnpm-lock.yaml'))) {\n    return 'pnpm';\n  } else if (fs.existsSync(path.join(cwd, 'yarn.lock'))) {\n    return 'yarn';\n  } else if (fs.existsSync(path.join(cwd, 'package-lock.json'))) {\n    return 'npm';\n  } else {\n    return null;\n  }\n}\n\nexport function getInstallCommand(packageManager: PackageManager): string {\n  switch (packageManager) {\n    case 'npm':\n      return 'npm install --save-dev';\n    case 'yarn':\n      return 'yarn add --dev';\n    case 'pnpm':\n      return 'pnpm add --save-dev';\n    case 'bun':\n      return 'bun add --dev';\n    default:\n      throw new Error('Unknown package manager');\n  }\n}\n\nexport function getUpdateCommand(packageManager: PackageManager): string {\n  switch (packageManager) {\n    case 'npm':\n      return 'npm install';\n    case 'yarn':\n      return 'yarn';\n    case 'pnpm':\n      return 'pnpm install';\n    case 'bun':\n      return 'bun install';\n    default:\n      throw new Error('Unknown package manager');\n  }\n}\n\nexport async function huskyAlreadyInstall() {\n  const packageJsonPath = path.join(process.cwd(), 'package.json');\n  const packageJson = (await fs.readJSON(packageJsonPath)) as PackageJson;\n\n  return Boolean(packageJson.dependencies?.husky || packageJson.devDependencies?.husky);\n}\n\nexport function cwdExists(cwd: string) {\n  const currentWorkingDirectory = path.resolve(cwd);\n\n  if (!fs.existsSync(currentWorkingDirectory)) {\n    logger.error(`The path ${currentWorkingDirectory} does not exist. Please try again.`);\n    process.exit(1);\n  }\n\n  return currentWorkingDirectory;\n}\n","import chalk from 'chalk';\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n  break() {\n    console.log('');\n  }\n};\n","import { logger } from '@/src/utils/logger';\n\nexport function handleError(error: unknown) {\n  if (typeof error === 'string') {\n    logger.error(error);\n    process.exit(1);\n  }\n\n  if (error instanceof Error) {\n    logger.error(error.message);\n    process.exit(1);\n  }\n\n  logger.error('Something went wrong. Please try again.');\n  process.exit(1);\n}\n","import fs from 'fs-extra';\nimport { execSync } from 'node:child_process';\nimport path from 'node:path';\nimport prompts from 'prompts';\n\nimport { emojiList } from '@/src/utils/emoji-list';\nimport { getInstallCommand, getUpdateCommand, huskyAlreadyInstall } from '@/src/utils/get-package-info';\nimport { handleError } from '@/src/utils/handle-error';\nimport { logger } from '@/src/utils/logger';\nimport { SCRIPT_TEMPLATE } from '@/src/utils/templates';\nimport type { PackageManager } from '@/src/utils/types';\n\nexport async function installHuskyPackage(packageManager: PackageManager) {\n  const huskyInstall = await huskyAlreadyInstall();\n\n  if (huskyInstall) {\n    logger.info('üí° Husky is already installed. Skipping installation. üí°');\n    return;\n  }\n\n  const installCommand = getInstallCommand(packageManager);\n\n  try {\n    runCommand(`${installCommand} husky`);\n    // eslint-disable-next-line unused-imports/no-unused-vars\n  } catch (error) {\n    logger.error('üí• Failed to install Husky. üí•');\n    process.exit(1);\n  } finally {\n    logger.success('‚úÖ Husky installed successfully!');\n  }\n}\n\nexport async function setUpConfig(cwd: string, packageManager: PackageManager) {\n  try {\n    const { emoji } = await promptConfig();\n    const selectedEmoji = emojiList[emoji].title;\n\n    const targetPath = path.resolve(cwd, `beautiful-commits.config.json`);\n    const config = {\n      selectedEmoji\n    };\n\n    await fs.writeFile(targetPath, JSON.stringify(config, null, 2), 'utf8');\n    await setUpHuskyConfig(cwd, packageManager);\n  } catch (error) {\n    handleError(error);\n  }\n}\n\nasync function promptConfig() {\n  return prompts({\n    type: 'select',\n    name: 'emoji',\n    message: 'üéØ Select emoji to add to the start of the commit',\n    hint: 'üí° Enter to submit.',\n    choices: emojiList\n  });\n}\n\nasync function setUpHuskyConfig(cwd: string, packageManager: PackageManager) {\n  const filePath = path.resolve(`${cwd}/.husky/prepare-commit-msg`);\n  const updatePackagesCommand = getUpdateCommand(packageManager);\n  try {\n    runCommand('npx husky-init');\n    runCommand(updatePackagesCommand);\n\n    runCommand('npx husky add .husky/prepare-commit-msg \"scripts/prepare-commit-msg.sh\"');\n    runCommand('chmod +x .husky/prepare-commit-msg');\n    fs.writeFileSync(filePath, SCRIPT_TEMPLATE, { encoding: 'utf8', mode: 0o755 });\n  } catch (error) {\n    handleError(error);\n  }\n}\n\nfunction runCommand(command: string) {\n  try {\n    execSync(command, { stdio: 'inherit' });\n  } catch (error) {\n    handleError(error);\n  }\n}\n","import type { Choice } from 'prompts';\n\nexport const emojiList: Choice[] = [{ title: 'üî•' }, { title: '‚òÑÔ∏è' }, { title: 'üåÄ' }, { title: 'üåï' }, { title: 'üèùÔ∏è' }, { title: 'üëπ' }];\n","export const SCRIPT_TEMPLATE = `#!/bin/sh\n\nCOMMIT_MSG_FILE=$1\nCOMMIT_SOURCE=$2\nSHA1=$3\n\nCONFIG_FILE=\"./beautiful-commits.config.json\"\n\nif [ -f \"$CONFIG_FILE\" ]; then\n  EMOJI=$(grep -oP '\"selectedEmoji\":\\\\s*\"\\\\K[^\"]+' \"$CONFIG_FILE\")\n  if [ -z \"$EMOJI\" ]; then\n    EMOJI=\"‚òÑÔ∏è\"\n  fi\nelse\n  EMOJI=\"‚òÑÔ∏è\"\nfi\n\nif [ \"$COMMIT_SOURCE\" = \"merge\" ]; then\n  exit 0\nfi\n\nif [ ! -f \"$COMMIT_MSG_FILE\" ]; then\n  echo \"Error: Commit message file not found.\"\n  exit 1\nfi\n\nCOMMIT_MSG=$(cat \"$COMMIT_MSG_FILE\")\necho \"$EMOJI $COMMIT_MSG\" > \"$COMMIT_MSG_FILE\"\n\n\n`;\n","import { z } from 'zod';\n\nexport const initOptionsSchema = z.object({\n  cwd: z.string().optional()\n});\n\nexport type PackageManager = 'npm' | 'yarn' | 'pnpm' | 'bun';\n"],"mappings":"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","names":["Command","Command","process","fs","path","chalk","logger","args","getPackageInfo","packageJsonPath","path","fs","detectPackageManager","cwd","getInstallCommand","packageManager","getUpdateCommand","huskyAlreadyInstall","packageJson","cwdExists","currentWorkingDirectory","logger","handleError","error","logger","fs","execSync","path","prompts","emojiList","SCRIPT_TEMPLATE","installHuskyPackage","packageManager","huskyAlreadyInstall","logger","installCommand","getInstallCommand","runCommand","setUpConfig","cwd","emoji","promptConfig","selectedEmoji","emojiList","targetPath","path","config","fs","setUpHuskyConfig","error","handleError","prompts","filePath","updatePackagesCommand","getUpdateCommand","SCRIPT_TEMPLATE","command","execSync","z","initOptionsSchema","init","Command","opts","options","initOptionsSchema","cwd","cwdExists","packageManager","detectPackageManager","logger","installHuskyPackage","setUpConfig","error","handleError","main","packageJson","getPackageInfo","program","Command","init"]}